# Production Configuration Checklist

This file contains all the settings that need to be changed when deploying to production.

## Security Settings

### 1. Debug Mode
**Current Setting:**
```python
DEBUG = os.getenv('DEBUG', 'False') == 'True'
```
**Production Change:**
```python
DEBUG = False
```

### 2. Secret Key
**Current Setting:**
```python
SECRET_KEY = os.getenv('SECRET_KEY')
```
**Production Requirements:**
- Ensure `SECRET_KEY` is set in your production environment variables
- Use a strong, randomly generated secret key
- Never commit the actual secret key to version control

### 3. Allowed Hosts
**Current Setting:**
```python
ALLOWED_HOSTS = []
```
**Production Change:**
```python
ALLOWED_HOSTS = [
    'yourdomain.com',
    'www.yourdomain.com',
    'api.yourdomain.com',
]
```

## Cookie and Session Security

### 4. JWT Cookie Security
**Current Settings:**
```python
'JWT_AUTH_SECURE': False,  # Set to True in production with HTTPS
'JWT_AUTH_SAMESITE': 'Lax',  # Use 'Strict' for better security
```
**Production Changes:**
```python
'JWT_AUTH_SECURE': True,  # Requires HTTPS
'JWT_AUTH_SAMESITE': 'Strict',  # Better security
```

### 5. Session Cookie Security
**Current Settings:**
```python
SESSION_COOKIE_SECURE = False  # Set to True in production with HTTPS
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Lax'
```
**Production Changes:**
```python
SESSION_COOKIE_SECURE = True  # Requires HTTPS
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Strict'
```

### 6. SIMPLE_JWT Cookie Security
**Current Settings:**
```python
'AUTH_COOKIE_SECURE': False,  # Set to True in production with HTTPS
'AUTH_COOKIE_SAMESITE': 'Lax',
```
**Production Changes:**
```python
'AUTH_COOKIE_SECURE': True,  # Requires HTTPS
'AUTH_COOKIE_SAMESITE': 'Strict',
```

## CORS Configuration

### 7. CORS Origins
**Current Settings:**
```python
CORS_ALLOW_ALL_ORIGINS = True  # Set to False in production
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",  # React development server
    "http://127.0.0.1:3000",
    "http://localhost:8000",  # Django development server
    "http://127.0.0.1:8000",
]
```
**Production Changes:**
```python
CORS_ALLOW_ALL_ORIGINS = False
CORS_ALLOWED_ORIGINS = [
    "https://yourdomain.com",
    "https://www.yourdomain.com",
    "https://app.yourdomain.com",
]
```

### 8. CSRF Trusted Origins
**Current Settings:**
```python
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://localhost:8000",
    "http://127.0.0.1:8000",
]
```
**Production Changes:**
```python
CSRF_TRUSTED_ORIGINS = [
    "https://yourdomain.com",
    "https://www.yourdomain.com",
    "https://app.yourdomain.com",
]
```

## Database Configuration

### 9. Database Settings
**Current Setting:**
```python
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}
```
**Production Change (PostgreSQL Example):**
```python
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DB_NAME'),
        'USER': os.getenv('DB_USER'),
        'PASSWORD': os.getenv('DB_PASSWORD'),
        'HOST': os.getenv('DB_HOST'),
        'PORT': os.getenv('DB_PORT', '5432'),
    }
}
```

## Email Configuration

### 10. Email Backend
**Current Setting:**
```python
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
```
**Production Change:**
```python
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = os.getenv('EMAIL_HOST')
EMAIL_PORT = int(os.getenv('EMAIL_PORT', 587))
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', 'True') == 'True'
```

## Static Files

### 11. Static Files Configuration
**Current Setting:**
```python
STATIC_URL = 'static/'
```
**Production Addition:**
```python
STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]
```

## Environment Variables

### 12. Required Environment Variables for Production
Create a `.env` file in production with these variables:
```bash
# Django
SECRET_KEY=your-super-secret-key-here
DEBUG=False

# Database
DB_NAME=your_database_name
DB_USER=your_database_user
DB_PASSWORD=your_database_password
DB_HOST=your_database_host
DB_PORT=5432

# Email
EMAIL_HOST=smtp.your-email-provider.com
EMAIL_PORT=587
EMAIL_HOST_USER=your-email@domain.com
EMAIL_HOST_PASSWORD=your-email-password
EMAIL_USE_TLS=True

# CORS and CSRF
ALLOWED_HOSTS=yourdomain.com,www.yourdomain.com
CORS_ALLOWED_ORIGINS=https://yourdomain.com,https://www.yourdomain.com
CSRF_TRUSTED_ORIGINS=https://yourdomain.com,https://www.yourdomain.com
```

## Additional Security Recommendations

### 13. Security Middleware
Add these security headers to your production settings:
```python
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_SECONDS = 31536000
SECURE_REDIRECT_EXEMPT = []
SECURE_SSL_REDIRECT = True
X_FRAME_OPTIONS = 'DENY'
```

### 14. Logging Configuration
Add proper logging for production:
```python
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'logs' / 'django.log',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}
```

## Deployment Checklist

- [ ] Set `DEBUG = False`
- [ ] Configure `ALLOWED_HOSTS` with your domain
- [ ] Set `SECRET_KEY` in environment variables
- [ ] Enable HTTPS and set all `SECURE = True` settings
- [ ] Configure CORS with specific origins (not `ALLOW_ALL_ORIGINS`)
- [ ] Set up CSRF trusted origins
- [ ] Configure production database
- [ ] Set up email backend
- [ ] Configure static files
- [ ] Set up logging
- [ ] Install SSL certificate
- [ ] Test all authentication endpoints
- [ ] Verify cookie-based authentication works
- [ ] Test CORS with your frontend
- [ ] Monitor logs for errors

## Testing Production Settings

Before going live, test these endpoints with your production settings:
- Login: `POST /dj-rest-auth/login/`
- Logout: `POST /dj-rest-auth/logout/`
- Token refresh: `POST /dj-rest-auth/token/refresh/`
- Protected endpoints with cookies

Remember: Always test in a staging environment first! 